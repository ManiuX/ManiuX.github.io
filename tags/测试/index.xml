<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>测试 on Maniux-learning</title>
    <link>https://maniux.github.io/tags/%E6%B5%8B%E8%AF%95/</link>
    <description>Recent content in 测试 on Maniux-learning</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Jun 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://maniux.github.io/tags/%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于手工测试的小小感想</title>
      <link>https://maniux.github.io/2017/06/05/%E5%85%B3%E4%BA%8E%E6%89%8B%E5%B7%A5%E6%B5%8B%E8%AF%95%E7%9A%84%E5%B0%8F%E5%B0%8F%E6%84%9F%E6%83%B3/</link>
      <pubDate>Mon, 05 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://maniux.github.io/2017/06/05/%E5%85%B3%E4%BA%8E%E6%89%8B%E5%B7%A5%E6%B5%8B%E8%AF%95%E7%9A%84%E5%B0%8F%E5%B0%8F%E6%84%9F%E6%83%B3/</guid>
      <description>功能测试之手工测试 1.大多数人眼中的测试：
2.程序员眼中的测试：
3.测试的内心：</description>
    </item>
    
    <item>
      <title>探索式软件测试读书笔记</title>
      <link>https://maniux.github.io/2018/11/04/%E6%8E%A2%E7%B4%A2%E5%BC%8F%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 04 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://maniux.github.io/2018/11/04/%E6%8E%A2%E7%B4%A2%E5%BC%8F%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>探索式软件测试 《探索式软件测试》是清华大学出版的，作者为手工测试提供了一套可行的方法。
-- 手工测试在目前的软件开发流程中是不可或缺的工作，但往往手工测试的影响因素有太多太多，书中提到的缺陷预防和检测策略给出了手工测试保证质量较好的方式。
对于局部探索式测试法则是从用户输入，软件状态，代码路径，用户数据，软件运行环境几个方面都给出了对应的策略，探索式测试不是无规矩所循的试错，是能将每一方面的因素影响可以有效结合起来去做测试。 而让我觉得有趣的是作者对全局探索测试的几种方法的总结，虽然对与这几类总结会有不可避免的交叉部分，但这样的划分也让探索式软件测试这个名词看上去更接近本意了一些，可能大多数的测试人员在做测试的时候都会做这几个方面的测试工作，但少有人会发挥脑细胞去做这样一个类比和总结，我认同把测试的软件大致分为这几种区域 但对于每个区域下限定的方法我要保留意见（之前说过我对方法论嗤之以鼻呀！）。
  当然书中在探索式软件测试的实践部分提到的基于场景的测试方法这部分还是给了我一定的启发，通过场景操作引入变化，进而实现测试。就像书中也提到的关于软件测试五个棘手的问题： 1 漫无目的
2 重复性
3 暂时性
4 单调性
5 健忘性  其中对于漫无目的这一条我觉得这是对测试的一种不正确的认识，即使在敏捷软件流程中提倡有效的过程而非复杂的文档，但对测试来说不是说没有目标的去实现，一定有一个可指导的大纲或者一份简单的测试用例去明确要测试什么，或者即使没有一个类似文档的规约，做到心中有数也是对测试人员素质的考量，所以我并不认为漫无目的是手工测试的缺陷，这是对软件测试的偏见之谈。 而我更想去学习和探究的是在手工测试中如何更好的去解决重复性，回归测试在软件测试中也是很重要的部分，是时候拿出测试金字塔来说一说了，其实这本书意外的没有提到测试金字塔的内容，可能因为作者默认了探索式测试是处于测试金字塔的顶端吧，从金字塔的角度再去考虑重复性，再来思考探索性测试在回归测试中应该占的比重和需要做的工作（其实这块还是要根据具体项目吧？）。</description>
    </item>
    
    <item>
      <title>海盗派测试分析读书笔记</title>
      <link>https://maniux.github.io/2018/09/28/%E6%B5%B7%E7%9B%97%E6%B4%BE%E6%B5%8B%E8%AF%95%E5%88%86%E6%9E%90%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 28 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://maniux.github.io/2018/09/28/%E6%B5%B7%E7%9B%97%E6%B4%BE%E6%B5%8B%E8%AF%95%E5%88%86%E6%9E%90%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>海盗派测试分析：MFQ&amp;amp;PPDCS 《海盗派测试分析》是我的buddy推荐给我的必读书单其中的一本，卡哇伊的封面，有趣的书名，和书中简单的插图都让这本书读起来不是那么的晦涩，书中提到的MFQ框架的总结还是非常受用的。
这为我们在做测试的时候由整体的细节的理论去分析提供了简洁清晰的思路。
这本书中的五个话题都围绕着需求展开进行，与那些上来直接套一堆方法的测试书本还是有区别的（我有段时间对那些大行方法论的人和事极度的厌烦）在两个字是充满敬意的，其中Know Your Mission 就是去了解需求，挖掘需求的实现，这是测试分析中重要且贯穿始终的一部分工作。而关于Test Coverage Outline 感觉这部分的内容虽然显得有点套模版的意思，但对于快速的去了解一个系统，达到提炼主要信息的目的还是很有帮助的，而对于紧接着的建模部分，其实就是在业务的基础上去用软件测试的基础理论方法，不管是从PPDCS的哪一个方面去做Modeling都不能脱离业务，脱离用户（发现GIVEN_WHEN_THEN的三段式是无处不在，无处不适用）Model是测试用例的先行者，好的Model可以更好的去完成整个用例的设计，其实对于测试的执行来说，只要看前面的工作够不够扎实。 我个人认为这样一个流程化的测试分析理论是可参考，可执行的。但在敏捷软件测试中，对于测试在整个软件生命周期的角色定位，我认为应该是在理论的基础上又基于经验的，这个经验不是测试人员的个人经验，而是这个测试流程的经验，是一个针对被测系统可以反馈梳理的闭环。就像本书一开始所强调的海盗派测试的核心原则一般： &amp;emsp;&amp;emsp;1.主动收集信息
&amp;emsp;&amp;emsp;2.尽早提供反馈
&amp;emsp;&amp;emsp;3.及时调整策略
&amp;emsp;&amp;emsp;4.基于风险测试
这二十四字箴言我觉的更加贴合敏捷软件测试的理念。</description>
    </item>
    
  </channel>
</rss>